
Default docker file name without extension: Dockerfile

Lesson 10:
Docker commands

-------------------------------------------
Create docker file:   docker build -t <tage-name> .
    * -t ---> Tag name
    * . --> current directory

----------------------------------------------
List created docker files in system : docker images (or) docker image ls   


--------------------------------------------------
Run JS file from Docker image: docker run <tage-name>


-------------------------------------------------------
Pull image from docker hub and store the local machine
    cmd: docker pull <repository-name>/<image-container-name>


-----------------------------------------------------------------
cmd: docker run ubuntu --> This command helps to install images locally and run the image

-----------------------------------------------------------------
cmd: docker ps --> shows the running process and container

-----------------------------------------------------------------
cmd: docker ps -a ------> It shows stopped containers also

-----------------------------------------------------------------
cmd: docker run -it ubuntu ---> (-it) This means interative mode it execute the Ubuntu CLI

------------------------------------------------

cmd: docker run -p <LOCAL_PORT>:<EXPOSE_PORT> <IMAGE_NAME>  ----> "<LOCAL_PORT>:<EXPOSE_PORT>" following this part connect to the system localhost port to container
                                                                    exposed port


================================ Docker run cmd
cmd: dokcer start <CONTAINER_NAME> ----> This cmd run already existing container, not creat new container

cmd: docker logs <CONATINER_NAME>   ----> Prints's  Already existing logs (eg: console.log('log')) , note: "once container should up and ruunig"

cmd: docker logs -f <CONATINER _NAME>  ----> This cmd will print future logs

cmd: docker start -a <CONTAINER_NAME>   ----> This shorthand of attached mode (Print logs)

cmd: docker start -d <CONTAINER_NAME>   ----> Shorthand cmd for detached mode (No logs print)

cmd: docker start -it <CONTAINER_NAME>  --> This will run the container with intercative mode

cmd: docker start -a -i <CONTAINER_NAME> ----> This run with acttached with iteractive mode (You can give input, and get output in terimina)
                                                eg: if your runing python code with some input and get output the above mention cmd will heplful

========================== Remove image and containers

cmd: docker rm <CONATINER_NAM>    ----> Remove the specified container

cmd: docker rm <CONATINER_NAM_1> <CONATINER_NAM_2>   ----> Removed multiple container with single cmd

**note: If you want to delete image , first you should remove respective CONTAINER for that particular image

cmd: docker rmi <IMAGE_ID (OR) TAGE_NAME>  ----> Remove image

cmd: docker rmi <IMAGE_ID (OR) TAGE_NAME 1> <IMAGE_ID (OR) TAGE_NAME 2> ----> Remove more images

cmd: docker run -p <LOCAL_PORT>:<EXPOSE_PORT> -d --rm <IMAGE_ID or NAME>   ----> '--rm' flag will delete once you 'stop' the container, '-d' we specified is detached or attached mode (OPTIONAL)

cmd: docker image prune -a ----> Delete all local images


================================Inspect images
cmd: docker image inspect <IMAGE_NAME>  ----> This cmd list the all details and meta-data about the given image


===================================== TAG NAME for IMAGES and containers
cmd: docker build -t <CUSTOM_IMAGE_NAME:CUSTOM_TAGE_NAME>  ----> This will create custom image and tag names

cmd docker run -p <LOCAL_PORT>:<EXPOSE_PORT> -d --rm --name <CUSTOM_CONATINER_NAME> <IMAGE_NAME>: ----> Following cmd will create custom container name, whatever name you want just give after the '--name' flag ,  '-d --rm'  flag are OPTIONAL


============================= Push/Pull image to docker hub =================================

**note: First signin or signup to the 'docker hub'
cmd: docker login ----> If you want to push images to docker, you need to login docker, In your local machine

cmd: docker tag <EXISTING_IMAGE> <DOCKER_HUB_NAME/REPO_NAME>:
        If you want to push your image to 'docker hub', 'docker hub' have some restriction you should follow the image name convention
    Always image should contain <your docker hub name>/<repo name> , do you have any existing image, above mention cmd will colne existing image
    and create the given taged name image, then you can push your newly created image to docker,
    i) First flag is existing images in your local
    ii) Second flag is you should give the required naming convention for 'docker hub'

cmd: docker push <IMAGE _NAME>  ----> This push local image to docker hub


==================================== Data volume ==========================================

cmd: docker volume ls  ----> List all created named volumes from the local machine 

cmd: docker run -p <LOCAL_PORT>:<EXPOSE_PORT>  --rm --name <CONT_NAME> -v <VOLUME_NAMR>:/<DATA_FOLDER(eg: app/data)> <MAGE_NAME>

above the cmd will create the named volume "-v <VOLUME_NAME>:/<DATA_FOLDER(eg: app/data)>" 
    <VOLUME_NAMR> ----> this part is name of the volume
    <DATA_FOLDER(eg: app/data)> ----> this part is data store folder from the code base

cmd: docker volume create <VOLUME_NAME>  ----> You can create voulme manually

cmd: docker volume rm <VOLUME_NAME>  ----> This cmd removes the volume

cmd: docker volume prune ----> Remove all un-used volumes

===================================Dockerignore =====================================
'.dockerignore'  ----> What are the files we don't need to copy when build the image in docker wa can put that particular file name in '.dockerignore'


============================ Docker ENV and ARG 

type (1):
cmd: docker run -d --rm -p 3000:1221 --env-file ./.env --name <CONTAINER_ANE>  <IMAGE_NAME>

'--env-file' ----> flad and following env file in the container, we can put all env variable in that file


type (2):
cmd: docker run -d --rm 3000:1221 -e PORT=1001 --name <CONTAINER_ANE>  <IMAGE_NAME>

    This method we can directly give the ENV flag to the CLI

Note: AGR(ARGUMENT) we can assign only when build the image
Exp:
    First you should Add 'ARG' inside the Dockerfile

    cmd: docker build -t <IMG_NAME>:<TAG>  --build-arg <DOCKER_AGR_ANE>=<VALUE>
    This cmd will help  you build different images with different environmet and same code 


====================== Container networking ===============================

type(1): CONATINER to WWW network
      This will work perfrctly no config needed

type(2): CONTAINER to LOCALMACHIN (HOST)
    If you access docker conatainer to your local machine any services like (mongodb(local host), localhost web services)


    Note*: Only for local machine

    In this case docker provide the domain 'host.docker.internal' to access localhost service
        eg: mongodb://localhost:27017/<DB_NAME>   (to)  mongodb://host.docker.internal/<DB_NAME>

type(3): CONTAINER to CONTAINER
    This senario comes under the networing between the containers

    step: 1
        first create the network  
        cmd: docker network create <NETWORK_NAME>
        cmd: docker network ls  -----> This will list the all existing and created network from your local machine
    step: 2
        after creating the network, what are the containers you want, RUN with the network flag,
        note: If you are running the any port you want to expose that port, then only you add '-p'flag to expose 
        cmd: docker run --network <NETWORK_NAME> <IMAGE_NAME>

=========================== Multi container ========================
Multi containered app runs inside the network
    1) But react app only run's on browser, so react app can't access any container running inside the network
        sol:
            NODE and "NODE" related service (like: mongodb), we will run inside the network, and expo the PORT with network only for browser will access
            API through the PORT  
        *note: if you running react app, you should run with interactive flag
            cmd: docker run -it --name <CONTAINER_NAME>  <IMAGE_NAME>  ----> '-it' refers to the INTERACTIVE



======================= Docker compose =================================

1) Create root level docker-compose.yml (or) .yaml file
    What are the services, we need should write

    note: 
        Defaultly docker will create network and run all services same network

    cmd: 
         docker-compose --version (verify istalled or not)

        1. docker-compose up ----> Running all cofigured service in docker-compose file
        2. docker-compose down ----> Stop all services
        3. docker-compose down -v -----> This cmd stoped all services and removed the DATA VOLUMES also

    Run docker-compose file
        We can run particlar container with docker-compose
        
        cmd: docker-compose run --rm service 

    Up maultiple service in docker-compose
        cmd: docker-compose up -d --build service-1 servie-2 service-3
        -d ----> Detached mode
        --build ----> docker-compose re-check if any changes are happen in code then take build image

